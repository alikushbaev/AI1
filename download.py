import flask
import g4f
import threading
import markdown as md
app = flask.Flask(__name__)

TOPICS = [
    "–ß—Ç–æ —Ç–∞–∫–æ–µ Python –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞",
    "–ü–µ—Ä–≤–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ print()",
    "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö (int, float, str, bool)",
    "–û–ø–µ—Ä–∞—Ç–æ—Ä—ã –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π",
    "–í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö input() –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ç–∏–ø–æ–≤",
    "–£—Å–ª–æ–≤–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: if / elif / else",
    "–¶–∏–∫–ª—ã: for –∏ while, —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ü–∏–∫–ª–∞",
    "–û–ø–µ—Ä–∞—Ç–æ—Ä—ã break, continue, pass",
    "–§—É–Ω–∫—Ü–∏–∏: def, –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, return",
    "–ê—Ä–≥—É–º–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–π: –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ, –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ, *args, **kwargs",
    "–°–ø–∏—Å–∫–∏ (list): —Å–æ–∑–¥–∞–Ω–∏–µ, –º–µ—Ç–æ–¥—ã, —Å—Ä–µ–∑—ã",
    "–ö–æ—Ä—Ç–µ–∂–∏ (tuple): –Ω–µ–∏–∑–º–µ–Ω—è–µ–º—ã–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
    "–ú–Ω–æ–∂–µ—Å—Ç–≤–∞ (set): —Å–≤–æ–π—Å—Ç–≤–∞ –∏ –æ–ø–µ—Ä–∞—Ü–∏–∏",
    "–°–ª–æ–≤–∞—Ä–∏ (dict): –∫–ª—é—á–∏, –∑–Ω–∞—á–µ–Ω–∏—è, –∏—Ç–µ—Ä–∞—Ü–∏—è",
    "–°—Ç—Ä–æ–∫–∏: –º–µ—Ç–æ–¥—ã —Å—Ç—Ä–æ–∫, —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, f-—Å—Ç—Ä–æ–∫–∏",
    "–†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏: open, read, write, with",
    "–ò—Å–∫–ª—é—á–µ–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫: try/except/finally",
    "–ú–æ–¥—É–ª–∏ –∏ –ø–∞–∫–µ—Ç—ã: –∏–º–ø–æ—Ä—Ç, —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞",
    "__name__ == '__main__': –∑–∞—á–µ–º –∏ –∫–∞–∫",
    "–õ—è–º–±–¥–∞-—Ñ—É–Ω–∫—Ü–∏–∏ –∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã —Å–ø–∏—Å–∫–æ–≤",
    "–ò—Ç–µ—Ä–∞—Ç–æ—Ä—ã –∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã (yield)",
    "–î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã: –∑–∞—á–µ–º –∏ –∫–∞–∫ –ø–∏—Å–∞—Ç—å",
    "–û–û–ü: –∫–ª–∞—Å—Å—ã, –æ–±—ä–µ–∫—Ç—ã, self",
    "–ê—Ç—Ä–∏–±—É—Ç—ã –∏ –º–µ—Ç–æ–¥—ã —ç–∫–∑–µ–º–ø–ª—è—Ä–∞",
    "–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ã: __init__",
    "–ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∏ –ø–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º",
    "–ò–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏—è –∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã",
    "–ú–∞–≥–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã: __str__, __repr__, __len__, __iter__",
    "–†–∞–±–æ—Ç–∞ —Å –¥–∞—Ç–∞–º–∏ –∏ –≤—Ä–µ–º–µ–Ω–µ–º (datetime)",
    "–ú–æ–¥—É–ª—å random: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª",
    "–†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è (re)",
    "–†–∞–±–æ—Ç–∞ —Å JSON –∏ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è",
    "CSV: —á—Ç–µ–Ω–∏–µ/–∑–∞–ø–∏—Å—å —Ç–∞–±–ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
    "argparse: –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏",
    "–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å logging",
    "Unit-—Ç–µ—Å—Ç—ã —Å unittest",
    "doctest –∏ Pytest",
    "–ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–æ–¥–∞",
    "–ê–ª–≥–æ—Ä–∏—Ç–º—ã: —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏, –ø–æ–∏—Å–∫",
    "–°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö: —Å—Ç–µ–∫, –æ—á–µ—Ä–µ–¥—å, —Å–ø–∏—Å–æ–∫, –¥–µ—Ä–µ–≤–æ",
    "–†–µ–∫—É—Ä—Å–∏—è: –ø—Ä–∏–º–µ—Ä—ã –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª—É–±–∏–Ω—ã",
    "–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å: async/await",
    "–ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å: threading (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è GIL)",
    "–ú–Ω–æ–≥–æ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–Ω–æ—Å—Ç—å: multiprocessing",
    "subprocess: –∑–∞–ø—É—Å–∫ –≤–Ω–µ—à–Ω–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤",
    "–†–∞–±–æ—Ç–∞ —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏ –ø—É—Ç—è–º–∏: os –∏ pathlib",
    "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞: –≤–∞–ª–∏–¥–∞—Ü–∏—è –∏ –∑–∞—â–∏—Ç–∞",
    "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞–º—è—Ç–∏: –ø—Ä–æ—Ñ–∞–π–ª–∏–Ω–≥ –∏ —Å–æ–≤–µ—Ç—ã",
    "–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Å–æ–ª—å–Ω—ã—Ö —É—Ç–∏–ª–∏—Ç (–Ω–∞ –ø—Ä–∏–º–µ—Ä–µ TODO-–º–µ–Ω–µ–¥–∂–µ—Ä–∞)",
    "–°–µ—Ä–∏–π–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: pickle, yaml",
    "–ü—Ä–∞–∫—Ç–∏–∫–∏ —á–∏—Å—Ç–æ–≥–æ –∫–æ–¥–∞ (PEP8, PEP20)",
    "–î–æ–∫—Å—Ç—Ä–∏–Ω–≥–∏ –∏ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ —Ç–∏–ø–æ–≤",
    "CI/CD: –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏",
    "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ production-—Å–∫—Ä–∏–ø—Ç–æ–≤ –∏ –¥–∏—Å—Ç—Ä–∏–±—É—Ü–∏—è",
    "pip –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏",
    "venv –∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è",
    "–†–∞–±–æ—Ç–∞ —Å Git –∏ GitHub",
    "–°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–∏—Ö –º–æ–¥—É–ª–µ–π –∏ –ø–∞–∫–µ—Ç–æ–≤",
    "–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ (requests)",
    "–ü–∞—Ä—Å–∏–Ω–≥ HTML (BeautifulSoup, lxml)",
    "–í–≤–µ–¥–µ–Ω–∏–µ –≤ SQLite –∏ SQLAlchemy",
    "Flask: –ø–µ—Ä–≤—ã–µ —à–∞–≥–∏",
    "FastAPI: —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥",
    "–ò—Ç–æ–≥–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç: –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–¥–∞—á (TODO App)",
]

PROMPT_TEMPLATE = (
    "–¢—ã ‚Äî –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å Python. –û–±—ä—è—Å–Ω–∏ —Ç–µ–º—É '{topic}' —Ç–∞–∫, "
    "—á—Ç–æ–±—ã –¥–∞–∂–µ –ø–æ–ª–Ω—ã–π –Ω–æ–≤–∏—á–æ–∫ –ø–æ–Ω—è–ª. –û—Ç–≤–µ—Ç—å —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
    "üìñ –û–±—ä—è—Å–Ω–µ–Ω–∏–µ:\n...\n\n"
    "üíª –ü—Ä–∏–º–µ—Ä –∫–æ–¥–∞:\n```python\n...\n```\n\n"
    "üèãÔ∏è‚Äç‚ôÇÔ∏è –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:\n1. ...\n2. ...\n3. ...\n\n"
    "üè° –î–æ–º–∞—à–∫–∞:\n1. ...\n2. ...\n3. ...\n\n"
    "–ü–∏—à–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ö–æ–¥ —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏."
)


def fetch_lesson_sync(topic: str) -> str:
    prompt = PROMPT_TEMPLATE.format(topic=topic)
    try:
        response = g4f.ChatCompletion.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}],
            stream=True,
        )
        collected = []
        for chunk in response:
            if isinstance(chunk, str):
                collected.append(chunk)
        return "".join(collected)
    except Exception as e:
        return f"[–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ]: {e}"


def fetch_lesson(topic: str) -> str:
    result = {}

    def task():
        result["content"] = fetch_lesson_sync(topic)

    thread = threading.Thread(target=task)
    thread.start()
    thread.join()  # –∂–¥—ë–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–∏–Ω–∞—á–µ –≤–µ—Ä–Ω—ë—Ç—Å—è –ø—É—Å—Ç–æ)
    return result.get("content", "[–û—à–∏–±–∫–∞: —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–µ—Ç]")


@app.route("/python")
def index():
    return flask.render_template("index.html", topics=TOPICS, show_loading="none")
@app.route("/python/howtouploadhw")
def howtouploadhw():
    return flask.render_template("howtouploadhw.html")

@app.route("/python/lesson/<int:lesson_id>")
def lessons(lesson_id):
    return flask.render_template("loading.html", id_lesson=lesson_id)


@app.route("/python/lesson_not_load/<int:lesson_id>")
def lesson(lesson_id):
    if lesson_id < 0 or lesson_id >= len(TOPICS):
        return "–¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", 404

    topic = TOPICS[lesson_id]
    content = fetch_lesson(topic)
    return flask.render_template(
        "index.html", topics=TOPICS, active=lesson_id, lesson=content, markdown=lambda text: md.markdown(
        text,
        extensions=["fenced_code", "codehilite"]
    )
    )


if __name__ == "__main__":
    app.run(debug=True)
